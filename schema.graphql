type Query {
    usuario(id: ID!): Usuario
    usuarios: [Usuario]
    Usuario:Usuario
    receta(id: ID!): Receta
    recetas: [Receta]
    categorias: [Categoria]

}

type Mutation {
    crearUsuario(input: CrearUsuarioInput!): Usuario
    actualizarUsuario(input: ActualizarUsuarioInput!): Usuario
    eliminarUsuario(id: ID!): Usuario
    crearReceta(input: CrearRecetaInput!): Receta
    actualizarReceta(input: ActualizarRecetaInput!): Receta
    eliminarReceta(id: ID!): Receta
    crearCategoria(input: CrearCategoria!): Categoria
    actualizarCategoria(input: ActualizarCategoria): Categoria
    eliminarCategoria(id:ID!): Categoria
}

type Usuario {
    id: ID!
    name: String!
    last_name: String
    email: String!
    password:String!
    recetas: [Receta]
    created_at: String!
}

input CrearUsuarioInput {
    name: String!
    last_name: String
    email: String!
    password: String!
}

input ActualizarUsuarioInput {
    id: ID!
    name: String
    last_name: String
    email: String
}

input ActualizarRecetaInput {
    id: ID!
    nombre: String
    descripcion: String
    ingredientes: String
    pasos: String
    imagen: String
}

type Receta {
    id: ID!
    nombre: String
    descripcion: String
    ingredientes: String
    pasos: String
    categoria: [Categoria]
    usuario: Usuario!  
    imagen: String
    created_at: String!
}

input CrearRecetaInput {
    nombre: String
    descripcion: String
    ingredientes: String
    pasos: String
    categoria: String
    id_usuario: String!
    imagen: String
}


type Categoria{
    id:ID!
    titulo: String! 
    descripcion: String! 
    recetas: [Receta]
    created_at: String!
}

input CrearCategoria{
    titulo: String! 
    descripcion: String! 
    receta: String
}

input ActualizarCategoria{
    id:ID!
    titulo: String
    descripcion: String
}

type Subscription {
    nuevaReceta: Receta
    nuevoUsuario: Usuario
    nuevaCategoria: Categoria
}

